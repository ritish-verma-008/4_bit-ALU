module top_module (
    input [3:0] a, b,
    input [2:0] sel,
    output [6:0] seg,
    output [3:0] D1_AN);
    wire [3:0] y;
    ALU alu_inst (
        .a(a),
        .b(b),
        .sel(sel),
        .y(y),
        .D1_AN(D1_AN));
    seg_7 seg_inst (
        .y(y),
        .seg(seg));
endmodule
module ALU(a, b, sel, y, D1_AN);
    input [3:0] a, b;
    input [2:0] sel;
    output reg [3:0] y;
    output [3:0] D1_AN;
    assign D1_AN = 4'b1110;
    always @(*) begin
        case (sel)
            3'b000: y = 4'b0000;      // No operation
            3'b001: y = a + b;        // Addition
            3'b010: y = a - b;        // Subtraction
            3'b011: y = a & b;        // AND
            3'b100: y = a | b;        // OR
            3'b101: y = ~a;           // NOT a
            3'b110: y = ~b;           // NOT b
            3'b111: y = 4'b0000;      // No operation
            default: y = 4'b0000;
        endcase
    end
endmodule
module seg_7(y, seg);
    input [3:0] y;
    output reg [6:0] seg;
    always @(*) begin
        case (y)
            4'd0:  seg = 7'b1000000;
            4'd1:  seg = 7'b1111001;
            4'd2:  seg = 7'b0100100;
            4'd3:  seg = 7'b0110000;
            4'd4:  seg = 7'b0011001;
            4'd5:  seg = 7'b0010010;
            4'd6:  seg = 7'b0000010;
            4'd7:  seg = 7'b1111000;
            4'd8:  seg = 7'b0000000;
            4'd9:  seg = 7'b0010000;
            4'd10: seg = 7'b0001000; // A
            4'd11: seg = 7'b0000011; // B
            4'd12: seg = 7'b1000110; // C
            4'd13: seg = 7'b0100001; // D
            4'd14: seg = 7'b0000110; // E
            4'd15: seg = 7'b0001110; // F
            default: seg = 7'b1111111;
        endcase
    end
endmodule
